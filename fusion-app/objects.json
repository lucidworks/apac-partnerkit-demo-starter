{
  "objects": {
    "collections": [
      {
        "id": "starterapp",
        "createdAt": "2020-11-12T02:35:50.145Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:44.130Z"
          },
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:44.132Z"
          }
        ]
      },
      {
        "id": "starterapp_bpr_item_recs",
        "createdAt": "2020-11-12T09:07:41.586Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_bpr_item_recs",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_bpr_user_recs",
        "createdAt": "2020-11-12T09:07:25.209Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_bpr_user_recs",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_content_recs",
        "createdAt": "2020-11-12T09:08:00.818Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_content_recs",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_items_for_item_recommendations",
        "createdAt": "2020-11-12T09:07:33.651Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_items_for_item_recommendations",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_items_for_user_recommendations",
        "createdAt": "2020-11-12T09:07:17.065Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_items_for_user_recommendations",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_job_reports",
        "createdAt": "2020-11-12T02:35:50.145Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_job_reports",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "JOB_REPORTS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_queries_query_recs",
        "createdAt": "2020-11-12T09:07:50.571Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_queries_query_recs",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_query_rewrite",
        "createdAt": "2020-11-12T02:35:50.145Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_query_rewrite",
          "numShards": 1,
          "replicationFactor": 1,
          "configTemplate": "solr/conf/query_rewrite.zip"
        },
        "type": "QUERY_REWRITE",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_query_rewrite_staging",
        "createdAt": "2020-11-12T02:35:50.145Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_query_rewrite_staging",
          "numShards": 1,
          "replicationFactor": 1,
          "configTemplate": "solr/conf/query_rewrite.zip"
        },
        "type": "QUERY_REWRITE",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_recommender_models",
        "createdAt": "2020-11-12T09:07:09.031Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_recommender_models",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "metadata": {}
      },
      {
        "id": "starterapp_recs_aggr",
        "createdAt": "2020-11-12T09:07:00.293Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_recs_aggr",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4
        },
        "type": "RECOMMENDATIONS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_signals",
        "createdAt": "2020-11-12T02:35:58.452Z",
        "searchClusterId": "default",
        "commitWithin": 10,
        "solrParams": {
          "name": "starterapp_signals",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 4,
          "configTemplate": "solr/conf/insights.zip"
        },
        "type": "SIGNALS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_signals_aggr",
        "createdAt": "2020-11-12T02:36:07.078Z",
        "searchClusterId": "default",
        "commitWithin": 10,
        "solrParams": {
          "name": "starterapp_signals_aggr",
          "numShards": 1,
          "replicationFactor": 2,
          "maxShardsPerNode": 2
        },
        "type": "SIGNALS_AGGREGATION",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      },
      {
        "id": "starterapp_user_prefs",
        "createdAt": "2020-11-12T02:35:50.145Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "starterapp_user_prefs",
          "numShards": 1,
          "replicationFactor": 1,
          "configTemplate": "solr/conf/user_prefs.zip"
        },
        "type": "USER_PREFS",
        "relatedCollectionId": "starterapp",
        "metadata": {}
      }
    ],
    "indexPipelines": [
      {
        "id": "starterapp",
        "stages": [
          {
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "licensed": true
          },
          {
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "licensed": true
          },
          {
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp"
        }
      },
      {
        "id": "starterapp-question-answering",
        "stages": [
          {
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "licensed": true
          },
          {
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "licensed": true
          },
          {
            "modelId": "change-me",
            "failOnError": false,
            "storeInContext": false,
            "inputScript": "/* \nName of the document field to feed into the encoder. \n*/\nvar documentFeatureField = \"body_t\"\n\n/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", doc.getFirstFieldValue(documentFeatureField))\nmodelInput.put(\"pipeline\", \"index\")\nmodelInput.put(\"compress\", \"true\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nName of the field to store the compressed encoded vector in the document.\n\nCompressed vector field will be added to the document only if `compress = \"true\"` was \npassed into the `modelInput`.\n*/\nvar compressedVectorField = \"compressed_document_vector_s\"\n\n/*\nName of the field to store the uncompressed encoded vector in the document.\n\nBy default uncompressed vector wouldn't be added to the document. \nChange `keepUncompressedVector` to true if you want to keep uncompressed vector.  \n*/\nvar keepUncompressedVector = false\nvar vectorField = \"document_vector_ds\"\n\n/*\nClustering fields that keep cluster IDs and distances to the clusters.\nNOTE: Only models from the training module will provide clustering fields. \n*/\nvar clustersField = \"document_clusters_is\"\nvar distancesField = \"document_distances_ds\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be kept for the document.\nThe value should be less or equal to the value in the training configuration. \nThe default value of 1 is a good choice for most cases.\n*/\nvar numClusters = 1\n\n/*\nModel output parsing.\n*/\nif (modelOutput.containsKey(\"compressed_vector\")) {\n  doc.addField(compressedVectorField, modelOutput.get(\"compressed_vector\")[0])\n}\n\nif (keepUncompressedVector) {\n  doc.addField(vectorField, modelOutput.get(\"vector\"))\n}\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n  doc.addField(clustersField, modelOutput.get(\"clusters\").subList(0, numClusters))\n  doc.addField(distancesField, modelOutput.get(\"distances\").subList(0, numClusters))\n}",
            "storePredictedFields": false,
            "type": "machine-learning",
            "skip": false,
            "label": "Question Answering Deep Encoding",
            "licensed": true
          },
          {
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp-question-answering"
        }
      },
      {
        "id": "starterapp-question-answering-dual-fields",
        "stages": [
          {
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "licensed": true
          },
          {
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "licensed": true
          },
          {
            "modelId": "change-me",
            "failOnError": false,
            "storeInContext": false,
            "inputScript": "/* \nName of the document field to feed into the encoder. \n*/\nvar documentFeatureField = \"question_t\"\n\n/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", doc.getFirstFieldValue(documentFeatureField))\nmodelInput.put(\"pipeline\", \"index\")\nmodelInput.put(\"compress\", \"true\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nName of the field to store the compressed encoded vector in the document.\n\nCompressed vector field will be added to the document only if `compress = \"true\"` was \npassed into the `modelInput`.\n*/\nvar compressedVectorField = \"compressed_question_vector_s\"\n\n/*\nName of the field to store the uncompressed encoded vector in the document.\n\nBy default uncompressed vector wouldn't be added to the document. \nChange `keepUncompressedVector` to true if you want to keep uncompressed vector.  \n*/\nvar keepUncompressedVector = false\nvar vectorField = \"question_vector_ds\"\n\n/*\nClustering fields that keep cluster IDs and distances to the clusters.\nNOTE: Only models from the training module will provide clustering fields. \n*/\nvar clustersField = \"question_clusters_is\"\nvar distancesField = \"question_distances_ds\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be kept for the document.\nThe value should be less or equal to the value in the training configuration. \nThe default value of 1 is a good choice for most cases.\n*/\nvar numClusters = 1\n\n/*\nModel output parsing.\n*/\nif (modelOutput.containsKey(\"compressed_vector\")) {\n  doc.addField(compressedVectorField, modelOutput.get(\"compressed_vector\")[0])\n}\n\nif (keepUncompressedVector) {\n  doc.addField(vectorField, modelOutput.get(\"vector\"))\n}\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n  doc.addField(clustersField, modelOutput.get(\"clusters\").subList(0, numClusters))\n  doc.addField(distancesField, modelOutput.get(\"distances\").subList(0, numClusters))\n}",
            "storePredictedFields": false,
            "type": "machine-learning",
            "skip": false,
            "label": "Question Deep Encoding",
            "licensed": true
          },
          {
            "modelId": "change-me",
            "failOnError": false,
            "storeInContext": false,
            "inputScript": "/* \nName of the document field to feed into the encoder. \n*/\nvar documentFeatureField = \"answer_t\"\n\n/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", doc.getFirstFieldValue(documentFeatureField))\nmodelInput.put(\"pipeline\", \"index\")\nmodelInput.put(\"compress\", \"true\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nName of the field to store the compressed encoded vector in the document.\n\nCompressed vector field will be added to the document only if `compress = \"true\"` was \npassed into the `modelInput`.\n*/\nvar compressedVectorField = \"compressed_answer_vector_s\"\n\n/*\nName of the field to store the uncompressed encoded vector in the document.\n\nBy default uncompressed vector wouldn't be added to the document. \nChange `keepUncompressedVector` to true if you want to keep uncompressed vector.  \n*/\nvar keepUncompressedVector = false\nvar vectorField = \"answer_vector_ds\"\n\n/*\nClustering fields that keep cluster IDs and distances to the clusters.\nNOTE: Only models from the training module will provide clustering fields. \n*/\nvar clustersField = \"answer_clusters_is\"\nvar distancesField = \"answer_distances_ds\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be kept for the document.\nThe value should be less or equal to the value in the training configuration. \nThe default value of 1 is a good choice for most cases.\n*/\nvar numClusters = 1\n\n/*\nModel output parsing.\n*/\nif (modelOutput.containsKey(\"compressed_vector\")) {\n  doc.addField(compressedVectorField, modelOutput.get(\"compressed_vector\")[0])\n}\n\nif (keepUncompressedVector) {\n  doc.addField(vectorField, modelOutput.get(\"vector\"))\n}\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n  doc.addField(clustersField, modelOutput.get(\"clusters\").subList(0, numClusters))\n  doc.addField(distancesField, modelOutput.get(\"distances\").subList(0, numClusters))\n}",
            "storePredictedFields": false,
            "type": "machine-learning",
            "skip": false,
            "label": "Answer Deep Encoding",
            "licensed": true
          },
          {
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp-question-answering-dual-fields"
        }
      },
      {
        "id": "starterapp_query_rewrite_staging",
        "stages": [
          {
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_query_rewrite_staging"
        }
      }
    ],
    "queryPipelines": [
      {
        "id": "starterapp",
        "stages": [
          {
            "fields": [
              "title_t",
              "body_t"
            ],
            "count": 1,
            "length": 100,
            "pre": "<em>",
            "post": "</em>",
            "defaultHighlight": true,
            "type": "highlight",
            "skip": false,
            "licensed": true
          },
          {
            "paramToTag": "q",
            "spell_corrections_enabled": true,
            "phrase_boosting_enabled": true,
            "tail_rewrites_enabled": true,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": true,
            "remove_words_enabled": true,
            "overlaps": "longest_dominant_right",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "licensed": true
          },
          {
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "licensed": true
          },
          {
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [
              {
                "field": "title_t",
                "boost": 10.0
              },
              {
                "field": "body_t",
                "boost": 5.0
              }
            ],
            "returnFields": [],
            "returnScore": false,
            "type": "search-fields",
            "skip": false,
            "licensed": true
          },
          {
            "fieldFacets": [
              {
                "field": "_lw_data_source_s",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "licensed": true,
            "properties": {
              "autoCreated": true
            }
          },
          {
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "licensed": true
          },
          {
            "facetLabelParseDelimiter": "||",
            "type": "query-rules-augment-response",
            "skip": false,
            "licensed": true
          },
          {
            "script": "function (request, response, ctx) {\n\n\t// Java import for exception\n\tvar e = java.lang.Exception;\n  var base64 = java.util.Base64;\n  \n  var encoder = base64.getEncoder().withoutPadding();\n\n\t// New list to contain documents\n\tvar newReturnDocs = [];\n\n\ttry {\n\t\t// Get documents from response \n\t\tvar returnDocs = response.getInnerResponse().getDocuments();\n\t\t\n\t\t// Iterate through the documents\n\t\tfor each (var doc in returnDocs) {\n\t\t\t// Get id\n\t\t\tvar id = doc.getField(\"id\");\n\n      // Encode id in base-64\n    \t//var encodedId = btoa(id);\n      var encodedId = encoder.encodeToString(id.getBytes());\n\n  \t\t// Add encoded id to doc\n    \tdoc.putField(\"encoded_id_s\", encodedId);\n\t\t\t\n\t\t\t// Logs api.log\n\t\t\t//logger.info(\"\\n\\n *****************\\n\" + \"Encoded ID: \" + encodedId +\"\\n *****************\\n\\n\");\n\t\t\t\n\t\t  newReturnDocs.push(doc);\n\n\t\t}\n\t\t// Update response with new document list\n\t\tresponse.getInnerResponse().updateDocuments(newReturnDocs);\n\t} catch (e) {\n\t\tlogger.error(e);\n\t}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Encode ID field to use in URI query string",
            "licensed": true
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "starterapp"
        }
      },
      {
        "id": "starterapp-question-answering",
        "stages": [
          {
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [
              "*",
              "compressed_document_vector_s",
              "document_clusters_is"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "licensed": true
          },
          {
            "rowsFromSolrToRerank": 500,
            "type": "fusion-reranking",
            "skip": false,
            "licensed": true
          },
          {
            "serviceId": "ml-model-service",
            "modelId": "change-me",
            "failOnError": false,
            "inputScript": "/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", request.getFirstParam(\"q\"))\nmodelInput.put(\"pipeline\", \"query\")\nmodelInput.put(\"compress\", \"false\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nDocument clusters Solr field name. If clustering is used then Filter Query is \nconstructed against this field to return all documents that have the same clusters as \nquery. This concept is similar to Inverted File Index (IVF).\n\nNOTE: Only models from the training module support clustering.\n*/\nvar documentClustersField = \"document_clusters_is\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be used for each query.\nThe value should be less or equal to the value in the training configuration. \nBy default it's set to 0 which means that clustering isn't used. If you want to use \nclustering, value 10 is a good choice for most cases. \n*/\nvar numClusters = 0\n\n/*\nModel output parsing.\n*/\nvar queryVector = modelOutput.get(\"vector\").stream().mapToDouble(function(d){return d}).toArray()\ncontext.put(\"query_vector\", queryVector)\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n    clusters = Java.from(modelOutput.get(\"clusters\").subList(0, numClusters))\n    if (clusters.length > 1) {\n      fq = documentClustersField+\":(\"+clusters.join(' OR ')+\")\"\n    } else {\n      fq = documentClustersField+\":\"+clusters[0]\n    }\n    \n    request.putSingleParam(\"q\", \"*:*\")\n    request.addParam(\"fq\", fq)\n}",
            "type": "ml-query",
            "skip": false,
            "label": "Query Encoding",
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai"
          },
          {
            "inputParam": "q",
            "stopWords": "a,about,actual,actually,am,an,and,answer,any,anyone,anything,anyway,are,ask,asked,asking,at,away,based,basically,be,been,being,btw,by,can,consider,considered,could,did,do,does,doing,done,especially,essentially,etc,feel,find,for,found,from,generally,get,getting,give,given,giving,go,goes,gone,got,guess,had,happen,happened,happening,has,have,having,he,hello,help,hence,her,here,hers,hey,him,his,hope,hoped,however,i,I'd,i'm,'m,'ll,'d,ie,if,im,in,into,is,it,its,just,keeping,kept,knew,know,let,like,likely,list,look,looked,looking,makes,making,maybe,me,mention,mentioned,might,mind,much,my,need,needed,of,off,on,onto,otherwise,our,ours,out,perhaps,please,possible,possibly,pretty,probably,provide,provided,question,quite,rather,really,regard,regarding,relatively,said,saw,say,saying,search,searching,see,seeing,seem,seemed,seeming,seems,seen,select,she,should,show,simply,so,some,somehow,something,specifically,still,such,suggest,suggested,sure,take,taken,taking,tell,thank,thanks,that,the,their,them,then,there,thereby,therefore,therein,these,they,thing,think,thinking,this,those,though,thought,through,throughout,thru,thus,to,too,took,totally,toward,towards,tried,try,trying,up,upon,us,use,used,using,usually,very,via,want,wanted,was,we,went,were,what,will,wish,wished,with,within,wonder,wondering,would,yet,you,your,yours",
            "type": "stop-filter-query-stage",
            "skip": false,
            "licensed": true
          },
          {
            "inputParam": "q",
            "type": "query-escaping-query-stage",
            "skip": false,
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "licensed": true
          },
          {
            "queryVectorContextKey": "query_vector",
            "documentVectorField": "compressed_document_vector_s",
            "keepDocumentVectorField": false,
            "distanceType": "cosine_similarity",
            "documentDistanceResultField": "vectors_distance",
            "failOnError": false,
            "type": "per-result-vectors-distance",
            "skip": false,
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "expression": "0.3 * score / max_score + 0.7 * vectors_distance",
            "resultFieldName": "ensemble_score",
            "type": "response-math-expression",
            "skip": false,
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "sortField": "ensemble_score",
            "sortOrder": "desc",
            "failOnError": false,
            "type": "result-doc-field-sorting",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp-question-answering"
        }
      },
      {
        "id": "starterapp-question-answering-dual-fields",
        "stages": [
          {
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [
              "*",
              "compressed_document_vector_s",
              "document_clusters_ss"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "licensed": true
          },
          {
            "rowsFromSolrToRerank": 500,
            "type": "fusion-reranking",
            "skip": false,
            "licensed": true
          },
          {
            "serviceId": "ml-model-service",
            "modelId": "change-me",
            "failOnError": false,
            "inputScript": "/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", request.getFirstParam(\"q\"))\nmodelInput.put(\"pipeline\", \"query\")\nmodelInput.put(\"compress\", \"false\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nDocument clusters Solr field name. If clustering is used then Filter Query is \nconstructed against this field to return all documents that have the same clusters as \nquery. This concept is similar to Inverted File Index (IVF).\n\nNOTE: Only models from the training module support clustering.\n*/\nvar documentClustersField = \"question_clusters_is\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be used for each query.\nThe value should be less or equal to the value in the training configuration. \nBy default it's set to 0 which means that clustering isn't used. If you want to use \nclustering, value 10 is a good choice for most cases. \n*/\nvar numClusters = 0\n\n/*\nModel output parsing.\n*/\nvar queryVector = modelOutput.get(\"vector\").stream().mapToDouble(function(d){return d}).toArray()\ncontext.put(\"query_vector\", queryVector)\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n    clusters = Java.from(modelOutput.get(\"clusters\").subList(0, numClusters))\n    if (clusters.length > 1) {\n      fq = documentClustersField+\":(\"+clusters.join(' OR ')+\")\"\n    } else {\n      fq = documentClustersField+\":\"+clusters[0]\n    }\n    \n    request.putSingleParam(\"q\", \"*:*\")\n    request.addParam(\"fq\", fq)\n}",
            "type": "ml-query",
            "skip": false,
            "label": "Query Encoding",
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai"
          },
          {
            "inputParam": "q",
            "stopWords": "a,about,actual,actually,am,an,and,answer,any,anyone,anything,anyway,are,ask,asked,asking,at,away,based,basically,be,been,being,btw,by,can,consider,considered,could,did,do,does,doing,done,especially,essentially,etc,feel,find,for,found,from,generally,get,getting,give,given,giving,go,goes,gone,got,guess,had,happen,happened,happening,has,have,having,he,hello,help,hence,her,here,hers,hey,him,his,hope,hoped,however,i,I'd,i'm,'m,'ll,'d,ie,if,im,in,into,is,it,its,just,keeping,kept,knew,know,let,like,likely,list,look,looked,looking,makes,making,maybe,me,mention,mentioned,might,mind,much,my,need,needed,of,off,on,onto,otherwise,our,ours,out,perhaps,please,possible,possibly,pretty,probably,provide,provided,question,quite,rather,really,regard,regarding,relatively,said,saw,say,saying,search,searching,see,seeing,seem,seemed,seeming,seems,seen,select,she,should,show,simply,so,some,somehow,something,specifically,still,such,suggest,suggested,sure,take,taken,taking,tell,thank,thanks,that,the,their,them,then,there,thereby,therefore,therein,these,they,thing,think,thinking,this,those,though,thought,through,throughout,thru,thus,to,too,took,totally,toward,towards,tried,try,trying,up,upon,us,use,used,using,usually,very,via,want,wanted,was,we,went,were,what,will,wish,wished,with,within,wonder,wondering,would,yet,you,your,yours",
            "type": "stop-filter-query-stage",
            "skip": false,
            "licensed": true
          },
          {
            "inputParam": "q",
            "type": "query-escaping-query-stage",
            "skip": false,
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "licensed": true
          },
          {
            "queryVectorContextKey": "query_vector",
            "documentVectorField": "compressed_question_vector_s",
            "keepDocumentVectorField": false,
            "distanceType": "cosine_similarity",
            "documentDistanceResultField": "qq_distance",
            "failOnError": false,
            "type": "per-result-vectors-distance",
            "skip": false,
            "label": "QQ Vectors Distance",
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "queryVectorContextKey": "query_vector",
            "documentVectorField": "compressed_answer_vector_s",
            "keepDocumentVectorField": false,
            "distanceType": "cosine_similarity",
            "documentDistanceResultField": "qa_distance",
            "failOnError": false,
            "type": "per-result-vectors-distance",
            "skip": false,
            "label": "QA Vectors Distance",
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "expression": "0.2 * score / max_score + 0.4 * qq_distance + 0.4 * qa_distance",
            "resultFieldName": "ensemble_score",
            "type": "response-math-expression",
            "skip": false,
            "licensed": true,
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "sortField": "ensemble_score",
            "sortOrder": "desc",
            "failOnError": false,
            "type": "result-doc-field-sorting",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp-question-answering-dual-fields"
        }
      },
      {
        "id": "starterapp_content_recs",
        "stages": [
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "Get Recommended items",
            "responseSignalsEnabled": false
          },
          {
            "script": "function (request, response, ctx) {\n  // var docs = response.getInnerResponse().getDocuments();\n  // var ids = docs.stream().map(function(doc) {\n  //   return doc.getField(\"otherItemId\");\n  // }).distinct().collect(java.util.stream.Collectors.joining(\",\"));\n  // //logger.info(\"IDS: \"+ids);\n  // request.putSingleParam(\"doc_ids\", ids);\n\n  var docs = response.getInnerResponse().getDocuments();\n  var newIdList = [];\n\n  docs.stream().forEach(function(doc) {\n    var id = doc.getField(\"otherItemId\");\n    newIdList.push(id);\n  });\n\n  request.putSingleParam(\"doc_ids\", newIdList);\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Prep main data lookup"
          },
          {
            "key": "subquery-documents",
            "collection": "starterapp",
            "handler": "select",
            "method": "POST",
            "parentParams": [
              "doc_ids"
            ],
            "rollupKeys": [],
            "params": [
              {
                "key": "q",
                "value": "{!terms f=\"id\" v=$doc_ids}"
              },
              {
                "key": "fl",
                "value": "id,title_t,og_url_s,_lw_data_source_s,fileExtension_s"
              }
            ],
            "headers": [],
            "type": "sub-query",
            "skip": false,
            "label": "Get Documents"
          },
          {
            "script": "function (request, response, ctx) {\n  var subresults = [\"documents\"];\n  for(var i=0; i<subresults.length; i++){\n    var results = ctx.get(\"subquery-\"+subresults[i]).response.docs;\n\n    var docs = response.getInnerResponse().getDocuments();\n\n    docs.stream().forEach(function(doc) {\n      var id = doc.getField(\"otherItemId\");\n      if(id){\n        var idOptional = results.stream().filter(function(result) {\n          return id.equals(result.get(\"id\"));\n        }).findFirst();\n        if(idOptional.isPresent()) {\n          idOptional.get().entrySet().stream().forEach(function(entry) {\n            doc.putField(entry.getKey(), entry.getValue());\n          });\n        }\n      }\n    });\n    \n    response.getInnerResponse().updateDocuments(docs);\n  }\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Join documents with recommendations"
          },
          {
            "script": "function (request, response, ctx) {\n\n\t// Java import for exception\n\tvar e = java.lang.Exception;\n  var base64 = java.util.Base64;\n  \n  var encoder = base64.getEncoder().withoutPadding();\n\n\t// New list to contain documents\n\tvar newReturnDocs = [];\n\n\ttry {\n\t\t// Get documents from response \n\t\tvar returnDocs = response.getInnerResponse().getDocuments();\n\t\t\n\t\t// Iterate through the documents\n\t\tfor each (var doc in returnDocs) {\n\t\t\t// Get id\n\t\t\tvar id = doc.getField(\"id\");\n\n      // Encode id in base-64\n    \t//var encodedId = btoa(id);\n      var encodedId = encoder.encodeToString(id.getBytes());\n\n  \t\t// Add encoded id to doc\n    \tdoc.putField(\"encoded_id_s\", encodedId);\n\t\t\t\n\t\t\t// Logs api.log\n\t\t\t//logger.info(\"\\n\\n *****************\\n\" + \"Encoded ID: \" + encodedId +\"\\n *****************\\n\\n\");\n\t\t\t\n\t\t  newReturnDocs.push(doc);\n\n\t\t}\n\t\t// Update response with new document list\n\t\tresponse.getInnerResponse().updateDocuments(newReturnDocs);\n\t} catch (e) {\n\t\tlogger.error(e);\n\t}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Encode ID field to use in URI query string"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "starterapp_content_recs"
        }
      },
      {
        "id": "starterapp_items_for_item_bpr_recommendations",
        "stages": [
          {
            "fieldFacets": [
              {
                "field": "itemId",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "itemUniqueClicksCount",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "otherItemId",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "properties": {
              "autoCreated": true
            }
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "Get Recommended items",
            "responseSignalsEnabled": false
          },
          {
            "script": "function (request, response, ctx) {\n  with (DSL) {\n    var docs = response.getInnerResponse().getDocuments();\n    var ids = docs.stream().map(function(doc) {\n      return doc.getField(\"otherItemId\");\n    }).distinct().collect(java.util.stream.Collectors.joining(\",\"));\n    //logger.info(\"IDS: \"+ids);\n    request.putSingleParam(\"doc_ids\", ids);\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Prep main data lookup"
          },
          {
            "key": "subquery-documents",
            "collection": "starterapp",
            "handler": "select",
            "method": "POST",
            "parentParams": [
              "doc_ids"
            ],
            "rollupKeys": [],
            "params": [
              {
                "key": "q",
                "value": "{!terms f=\"id\" v=$doc_ids}"
              },
              {
                "key": "fl",
                "value": "id,title_t,og_url_s,_lw_data_source_s,fileExtension_s"
              }
            ],
            "headers": [],
            "type": "sub-query",
            "skip": false,
            "label": "Get Documents"
          },
          {
            "script": "function (request, response, ctx) {\n  var subresults = [\"documents\"];\n  for(var i=0; i<subresults.length; i++){\n    var results = ctx.get(\"subquery-\"+subresults[i]).response.docs;\n\n    var docs = response.getInnerResponse().getDocuments();\n\n    docs.stream().forEach(function(doc) {\n      var id = doc.getField(\"otherItemId\");\n      if(id){\n        var idOptional = results.stream().filter(function(result) {\n          return id.equals(result.get(\"id\"));\n        }).findFirst();\n        if(idOptional.isPresent()) {\n          idOptional.get().entrySet().stream().forEach(function(entry) {\n            doc.putField(entry.getKey(), entry.getValue());\n          });\n        }\n      }\n    });\n    \n    response.getInnerResponse().updateDocuments(docs);\n  }\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Join documents with recommendations"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "starterapp_items_for_item_bpr_recommendations"
        }
      },
      {
        "id": "starterapp_items_for_item_recommendations",
        "stages": [
          {
            "numRecommendations": 10,
            "modelID": "starterapp_recommender",
            "collection": "starterapp_items_for_item_recommendations",
            "itemIdParam": "item_id",
            "resultsLocation": "As Boosts",
            "itemIdField": "itemId",
            "otherItemIdField": "otherItemId",
            "similarityScoreField": "sim",
            "modelIdField": "modelId",
            "scaleRange": {
              "scaleMin": 5.0,
              "scaleMax": 15.0
            },
            "foldInUpdates": true,
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "boostFieldName": "id",
            "routingParams": [],
            "type": "item-recommendation",
            "skip": false,
            "licensed": true
          },
          {
            "paramToTag": "q",
            "spell_corrections_enabled": true,
            "phrase_boosting_enabled": true,
            "tail_rewrites_enabled": true,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": true,
            "remove_words_enabled": true,
            "overlaps": "longest_dominant_right",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "licensed": true
          },
          {
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "scaleRange": {
              "scaleMin": 1.1,
              "scaleMax": 5.0
            },
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "licensed": true
          },
          {
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [],
            "returnScore": false,
            "type": "search-fields",
            "skip": false,
            "licensed": true
          },
          {
            "fieldFacets": [],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "licensed": true
          },
          {
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "licensed": true
          },
          {
            "facetLabelParseDelimiter": "||",
            "type": "query-rules-augment-response",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "starterapp_items_for_item_recommendations"
        }
      },
      {
        "id": "starterapp_items_for_user_bpr_recommendations",
        "stages": [
          {
            "script": "function (request, response, ctx) {\n  request.addParam('fq','userId:'+request.getFirstParam('username'));\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Set user filter",
            "condition": "\"true\".equals(request.getFirstParam(\"filter.user_id\"))",
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "Get Recommended items",
            "responseSignalsEnabled": false
          },
          {
            "script": "function (request, response, ctx) {\n  with (DSL) {\n    var docs = response.getInnerResponse().getDocuments();\n    var ids = docs.stream().map(function(doc) {\n      return doc.getField(\"itemId\");\n    }).distinct().collect(java.util.stream.Collectors.joining(\",\"));\n    //logger.info(\"IDS: \"+ids);\n    request.putSingleParam(\"doc_ids\", ids);\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Prep main data lookup"
          },
          {
            "key": "subquery-documents",
            "collection": "starterapp",
            "handler": "select",
            "method": "POST",
            "parentParams": [
              "doc_ids"
            ],
            "rollupKeys": [],
            "params": [
              {
                "key": "q",
                "value": "{!terms f=\"id\" v=$doc_ids}"
              },
              {
                "key": "fl",
                "value": "id,title_t,og_url_s,_lw_data_source_s,fileExtension_s"
              }
            ],
            "headers": [],
            "type": "sub-query",
            "skip": false,
            "label": "Get Documents"
          },
          {
            "script": "function (request, response, ctx) {\n  var subresults = [\"documents\"];\n  for(var i=0; i<subresults.length; i++){\n    var results = ctx.get(\"subquery-\"+subresults[i]).response.docs;\n\n    var docs = response.getInnerResponse().getDocuments();\n\n    docs.stream().forEach(function(doc) {\n      var id = doc.getField(\"itemId\");\n      if(id){\n        var idOptional = results.stream().filter(function(result) {\n          return id.equals(result.get(\"id\"));\n        }).findFirst();\n        if(idOptional.isPresent()) {\n          idOptional.get().entrySet().stream().forEach(function(entry) {\n            doc.putField(entry.getKey(), entry.getValue());\n          });\n        }\n      }\n    });\n    \n    response.getInnerResponse().updateDocuments(docs);\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Join documents with recommendations"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_items_for_user_bpr_recommendations"
        }
      },
      {
        "id": "starterapp_items_for_user_recommendations",
        "stages": [
          {
            "numRecommendations": 10,
            "modelID": "starterapp_recommender",
            "collection": "starterapp_bpr_user_recs",
            "userIdParam": "username",
            "resultsLocation": "As Boosts",
            "userIdField": "userId",
            "itemIdField": "itemId",
            "weightField": "weight",
            "modelIdField": "modelId",
            "scaleRange": {
              "scaleMin": 5.0,
              "scaleMax": 15.0
            },
            "foldInUpdates": true,
            "rawSignalsCollection": "starterapp_signals",
            "modelCollection": "starterapp_recommender_models",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "boostFieldName": "id",
            "routingParams": [],
            "type": "user-recommendation",
            "skip": false,
            "licensed": true
          },
          {
            "paramToTag": "q",
            "spell_corrections_enabled": true,
            "phrase_boosting_enabled": true,
            "tail_rewrites_enabled": true,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": true,
            "remove_words_enabled": true,
            "overlaps": "longest_dominant_right",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "licensed": true
          },
          {
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "scaleRange": {
              "scaleMin": 1.1,
              "scaleMax": 5.0
            },
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "licensed": true
          },
          {
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [],
            "returnScore": false,
            "type": "search-fields",
            "skip": false,
            "licensed": true
          },
          {
            "fieldFacets": [],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "licensed": true
          },
          {
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "licensed": true
          },
          {
            "facetLabelParseDelimiter": "||",
            "type": "query-rules-augment-response",
            "skip": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_items_for_user_recommendations"
        }
      },
      {
        "id": "starterapp_queries_query_recs",
        "stages": [
          {
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [
              {
                "field": "query_t"
              }
            ],
            "returnFields": [],
            "returnScore": true,
            "type": "search-fields",
            "skip": false
          },
          {
            "fieldFacets": [
              {
                "field": "query_t",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "recommendation_t",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "licensed": true,
            "properties": {
              "autoCreated": true
            }
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": false,
            "licensed": true
          },
          {
            "script": "function(request, response, ctx) {\n\n  var qParam = request.getFirstParam(\"q\");\n  var docs = response.getInnerResponse().getDocuments();\n  var newDocs = [];\n\n  docs.stream().forEach(function(doc) {\n    var query = doc.getField(\"query_t\");\n    \n    // Add recommendations only where query_t field value is exact string match for q parameter\n    if(query == qParam) {\n      newDocs.push(doc);\n    }\n\n  });\n  response.getInnerResponse().updateDocuments(newDocs);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Remove duplicate query recommendations"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "starterapp_queries_query_recs"
        }
      },
      {
        "id": "starterapp_signals_clicks_by_user",
        "stages": [
          {
            "script": "function (request, response, ctx) {\n  request.addParam('fq','user_id:'+request.getFirstParam('username'));\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Set user filter",
            "condition": "\"true\".equals(request.getFirstParam(\"filter.user_id\"))",
            "licensed": true
          },
          {
            "params": [
              {
                "key": "fq",
                "value": "type:click",
                "policy": "append"
              },
              {
                "key": "fl",
                "value": "doc_id,user_id,query",
                "policy": "replace"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "Use click type signals only",
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "Get Signals",
            "responseSignalsEnabled": false,
            "licensed": true
          },
          {
            "script": "function (request, response, ctx) {\n    var docs = response.getInnerResponse().getDocuments();\n  var ids = docs.stream().map(function(doc) {\n    return doc.getField(\"doc_id\");\n  }).distinct().collect(java.util.stream.Collectors.joining(\",\"));\n  //logger.info(\"IDS: \"+ids);\n  request.putSingleParam(\"doc_ids\", ids);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Prep main data lookup",
            "licensed": true
          },
          {
            "key": "subquery-documents",
            "collection": "starterapp",
            "handler": "select",
            "method": "POST",
            "parentParams": [
              "doc_ids",
              "rows"
            ],
            "rollupKeys": [],
            "params": [
              {
                "key": "q",
                "value": "{!terms f=\"id\" v=$doc_ids}"
              },
              {
                "key": "fl",
                "value": "id,title_t,og_url_s,_lw_data_source_s,fileExtension_s"
              },
              {
                "key": "rows",
                "value": "${rows}"
              }
            ],
            "headers": [],
            "type": "sub-query",
            "skip": false,
            "label": "Get Documents",
            "licensed": true
          },
          {
            "script": "function(request, response, ctx) {\n  var subresults = [\"documents\"];\n  for(var i=0; i<subresults.length; i++){\n    var results = ctx.get(\"subquery-\"+subresults[i]).response.docs;\n\n    var docs = response.getInnerResponse().getDocuments();\n\n    docs.stream().forEach(function(doc) {\n      var id = doc.getField(\"doc_id\");\n      if(id){\n        var idOptional = results.stream().filter(function(result) {\n          return id.equals(result.get(\"id\"));\n        }).findFirst();\n        if(idOptional.isPresent()) {\n          idOptional.get().entrySet().stream().forEach(function(entry) {\n            doc.putField(entry.getKey(), entry.getValue());\n          });\n        }\n      }\n    });\n    \n    response.getInnerResponse().updateDocuments(docs);\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Join document data with signals"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_signals_clicks_by_user"
        }
      },
      {
        "id": "starterapp_signals_documents",
        "stages": [
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "Get Signals",
            "responseSignalsEnabled": false
          },
          {
            "script": "function (request, response, ctx) {\n  with (DSL) {\n    var docs = response.getInnerResponse().getDocuments();\n    var ids = docs.stream().map(function(doc) {\n      return doc.getField(\"doc_id_s\");\n    }).distinct().collect(java.util.stream.Collectors.joining(\",\"));\n    //logger.info(\"IDS: \"+ids);\n    request.putSingleParam(\"doc_ids\", ids);\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Prep main data lookup"
          },
          {
            "key": "subquery-documents",
            "collection": "starterapp",
            "handler": "select",
            "method": "POST",
            "parentParams": [
              "doc_ids"
            ],
            "rollupKeys": [],
            "params": [
              {
                "key": "q",
                "value": "{!terms f=\"id\" v=$doc_ids}"
              },
              {
                "key": "fl",
                "value": "id,title_t,og_url_s,_lw_data_source_s,fileExtension_s"
              }
            ],
            "headers": [],
            "type": "sub-query",
            "skip": false,
            "label": "Get Documents"
          },
          {
            "script": "function (request, response, ctx) {\n  var subresults = [\"documents\"];\n  for(var i=0; i<subresults.length; i++){\n    var results = ctx.get(\"subquery-\"+subresults[i]).response.docs;\n\n    var docs = response.getInnerResponse().getDocuments();\n\n    docs.stream().forEach(function(doc) {\n      var id = doc.getField(\"doc_id_s\");\n      if(id){\n        var idOptional = results.stream().filter(function(result) {\n          return id.equals(result.get(\"id\"));\n        }).findFirst();\n        if(idOptional.isPresent()) {\n          idOptional.get().entrySet().stream().forEach(function(entry) {\n            doc.putField(entry.getKey(), entry.getValue());\n          });\n        }\n      }\n    });\n    \n    response.getInnerResponse().updateDocuments(docs);\n  }\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Join Documents and Signals"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_signals_documents"
        }
      },
      {
        "id": "starterapp_signals_queries_by_user",
        "stages": [
          {
            "script": "function (request, response, ctx) {\n  request.addParam('fq','user_id:'+request.getFirstParam('username'));\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Set User Filter",
            "condition": "\"true\".equals(request.getFirstParam(\"filter.user_id\"))",
            "licensed": true
          },
          {
            "params": [
              {
                "key": "fq",
                "value": "type:request",
                "policy": "append"
              },
              {
                "key": "fl",
                "value": "query_orig_s,query",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "Filter signal type",
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_signals_queries_by_user"
        }
      },
      {
        "id": "starterapp_signals_query_facet",
        "stages": [
          {
            "params": [
              {
                "key": "fq",
                "value": "type:request",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "Filter signal type for tagcloud",
            "licensed": true
          },
          {
            "fieldFacets": [
              {
                "field": "{!key=query_alias}query_orig_s",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "label": "Set facet required for AS tagcloud widget",
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_signals_query_facet"
        }
      },
      {
        "id": "starterapp_typeahead",
        "stages": [
          {
            "script": "function(request) {\n  request.putSingleParam(\"signal_q\", request.getFirstParam(\"q\"));\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Set query parameter for subqueries",
            "licensed": true
          },
          {
            "key": "subquery-queries",
            "collection": "starterapp_recs_aggr",
            "handler": "select",
            "method": "GET",
            "parentParams": [
              "signal_q",
              "rows"
            ],
            "rollupKeys": [],
            "params": [
              {
                "key": "fq",
                "value": "aggr_type_s:click@query,user_id"
              },
              {
                "key": "q",
                "value": "{!edismax df=\"query_t\" v=$signal_q}"
              },
              {
                "key": "fl",
                "value": "query_t,aggr_type_s"
              },
              {
                "key": "sort",
                "value": "weight_d desc"
              }
            ],
            "headers": [],
            "asyncConfig": {
              "enabled": true,
              "asyncId": "searchhistory"
            },
            "type": "sub-query",
            "skip": false,
            "label": "Get Signals",
            "licensed": true
          },
          {
            "rows": 0,
            "start": 0,
            "sortOrder": [],
            "queryFields": [
              {
                "field": "title_t"
              }
            ],
            "returnFields": [
              "title_t",
              "og_url_s",
              "_lw_data_source_s"
            ],
            "returnScore": false,
            "type": "search-fields",
            "skip": false,
            "label": "Query parameters for Main query",
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "Get Documents",
            "responseSignalsEnabled": false,
            "licensed": true
          },
          {
            "asyncStageIds": [
              "searchhistory"
            ],
            "timeoutMs": 1000,
            "failFast": false,
            "strictAsyncIds": true,
            "type": "join",
            "skip": false,
            "licensed": true
          },
          {
            "script": "function(request, response, ctx) {\n  var e = java.lang.Exception;\n  var base64 = java.util.Base64;\n  var encoder = base64.getEncoder();\n\n  var returnDocs = response.getInnerResponse().getDocuments();\n  var newReturnDocs = [];\n  var signals = [];\n  var exclude = false;\n\n  // 1. Add a new field 'typeahead_type' for every document\n\tfor each (var doc in returnDocs) {\n\t\tvar id = doc.getField(\"id\"); // Get document id\n    var encodedId = encoder.encodeToString(id.getBytes()); // Encode id in base-64\n    \n    doc.putField(\"encoded_id_s\", encodedId); // Add encoded id to doc\n    doc.putField(\"typeahead_type\", \"document\");\n    newReturnDocs.push(doc);\n  }\n  \n  // 2. Iterate through each document in the subquery responses\n  //    and add typeahead_type field with appropriate value\n  ctx.entrySet().stream().filter(function(entry) {\n    return entry.getKey().startsWith(\"subquery-\");\n  }).forEach(function(results) {\n    results.getValue().response.docs.forEach(function(doc) {\n      var newDoc = new com.lucidworks.apollo.solr.response.ResponseDocument(doc, returnDocs.size());\n      if(newDoc.getField(\"aggr_type_s\")){\n        newDoc.putField(\"typeahead_type\",\"query\");\n\n        // Do not add duplicate signals\n        var query = newDoc.getField(\"query_t\");\n        if(signals.indexOf(query) > 0) {\n          exclude = true;\n        } else {\n          signals.push(query);\n        }\n      }\n      if(exclude == true) {\n        exclude = false;\n      } else {\n        newReturnDocs.push(newDoc);\n      }\n      \n    });\n  });\n  \n  response.getInnerResponse().updateDocuments(newReturnDocs);\n}\n",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Add subquery docs to response",
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_typeahead"
        }
      },
      {
        "id": "starterapp_user_filter",
        "stages": [
          {
            "script": "function (request, response, ctx) {\n  request.addParam('fq','user_id_s:'+request.getFirstParam('username'));\n}",
            "shareState": false,
            "type": "javascript-query",
            "skip": false,
            "label": "Set User Filter",
            "condition": "\"true\".equals(request.getFirstParam(\"filter.user_id\"));",
            "licensed": true
          },
          {
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": false,
            "licensed": true
          }
        ],
        "properties": {
          "secretSourcePipelineId": "starterapp_user_filter"
        }
      }
    ],
    "features": {
      "starterapp": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": true
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp",
          "params": {},
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "starterapp",
          "params": {},
          "enabled": true
        }
      ],
      "starterapp_bpr_item_recs": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_bpr_item_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_bpr_item_recs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_bpr_item_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_bpr_item_recs",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_bpr_user_recs": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_bpr_user_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_bpr_user_recs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_bpr_user_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_bpr_user_recs",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_content_recs": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_content_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_content_recs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_content_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_content_recs",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_items_for_item_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_items_for_item_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_items_for_item_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_items_for_item_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_items_for_item_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_items_for_user_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_items_for_user_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_items_for_user_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_items_for_user_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_items_for_user_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_job_reports": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_job_reports",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_job_reports",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_job_reports",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_job_reports",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_queries_query_recs": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_queries_query_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_queries_query_recs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_queries_query_recs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_queries_query_recs",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_query_rewrite": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_query_rewrite",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_query_rewrite",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_query_rewrite",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_query_rewrite",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_query_rewrite_staging": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_query_rewrite_staging",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_query_rewrite_staging",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_query_rewrite_staging",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_query_rewrite_staging",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_recommender_models": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_recommender_models",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_recommender_models",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_recommender_models",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_recommender_models",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_recs_aggr": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_recs_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_recs_aggr",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_recs_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_recs_aggr",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_signals": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_signals",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_signals",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_signals_aggr": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_signals_aggr",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_signals_aggr",
          "params": {},
          "enabled": false
        }
      ],
      "starterapp_user_prefs": [
        {
          "name": "partitionByTime",
          "collectionId": "starterapp_user_prefs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "starterapp_user_prefs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "starterapp_user_prefs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "starterapp_user_prefs",
          "params": {},
          "enabled": false
        }
      ]
    },
    "indexProfiles": [
      {
        "id": "starterapp",
        "parser": "starterapp",
        "indexPipeline": "starterapp",
        "collection": "starterapp",
        "params": []
      }
    ],
    "queryProfiles": [
      {
        "id": "starterapp",
        "queryPipeline": "starterapp",
        "searchHandler": "/select",
        "searchMode": "all",
        "collection": "starterapp"
      },
      {
        "id": "starterapp_popular_global_clicks",
        "queryPipeline": "starterapp_signals_documents",
        "searchHandler": "select",
        "collection": "starterapp_signals_aggr",
        "additionalProperties": {},
        "params": [
          {
            "key": "sort",
            "value": "aggr_count_i desc",
            "policy": "replace"
          },
          {
            "key": "fq",
            "value": "click@doc_id,filters,query",
            "policy": "append"
          },
          {
            "key": "rows",
            "value": "5",
            "policy": "replace"
          }
        ]
      },
      {
        "id": "starterapp_popular_global_searches",
        "queryPipeline": "starterapp_signals_query_facet",
        "searchHandler": "select",
        "collection": "starterapp_signals",
        "additionalProperties": {}
      },
      {
        "id": "starterapp_popular_user_searches",
        "queryPipeline": "starterapp_user_filter",
        "searchHandler": "select",
        "collection": "starterapp_recs_aggr",
        "additionalProperties": {},
        "params": [
          {
            "key": "sort",
            "value": "weight_d desc",
            "policy": "replace"
          },
          {
            "key": "filter.user_id",
            "value": "true",
            "policy": "append"
          },
          {
            "key": "facet.field",
            "value": "query_s",
            "policy": "append"
          },
          {
            "key": "facet",
            "value": "true",
            "policy": "replace"
          },
          {
            "key": "facet.limit",
            "value": "5",
            "policy": "append"
          },
          {
            "key": "facet.mincount",
            "value": "1",
            "policy": "append"
          },
          {
            "key": "fq",
            "value": "aggr_type_s:click@query,user_id",
            "policy": "append"
          },
          {
            "key": "fq",
            "value": "-query_s:/\\*:\\*/",
            "policy": "append"
          }
        ]
      },
      {
        "id": "starterapp_recent_user_clicks",
        "queryPipeline": "starterapp_signals_clicks_by_user",
        "searchHandler": "select",
        "collection": "starterapp_signals",
        "additionalProperties": {},
        "params": [
          {
            "key": "filter.user_id",
            "value": "true",
            "policy": "replace"
          },
          {
            "key": "rows",
            "value": "10",
            "policy": "replace"
          },
          {
            "key": "sort",
            "value": "timestamp_tdt desc",
            "policy": "replace"
          },
          {
            "key": "fq",
            "value": "-query:/\\*\\:\\*/",
            "policy": "append"
          },
          {
            "key": "fq",
            "value": "-query:/\\*/",
            "policy": "append"
          }
        ]
      },
      {
        "id": "starterapp_recent_user_searches",
        "queryPipeline": "starterapp_signals_queries_by_user",
        "searchHandler": "select",
        "collection": "starterapp_signals",
        "additionalProperties": {},
        "params": [
          {
            "key": "sort",
            "value": "timestamp_tdt desc",
            "policy": "replace"
          },
          {
            "key": "fq",
            "value": "-query:/\\*\\:\\*/",
            "policy": "append"
          },
          {
            "key": "fq",
            "value": "-query:/\\*/",
            "policy": "append"
          },
          {
            "key": "filter.user_id",
            "value": "true",
            "policy": "append"
          },
          {
            "key": "group",
            "value": "true",
            "policy": "append"
          },
          {
            "key": "group.field",
            "value": "query",
            "policy": "append"
          },
          {
            "key": "fq",
            "value": "query:*",
            "policy": "append"
          }
        ]
      },
      {
        "id": "starterapp_recommendation_items_for_item_bpr",
        "queryPipeline": "starterapp_items_for_item_bpr_recommendations",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "starterapp_bpr_item_recs",
        "additionalProperties": {},
        "params": [
          {
            "key": "rows",
            "value": "5",
            "policy": "replace"
          },
          {
            "key": "fq",
            "value": "itemId:${itemId}",
            "policy": "append"
          },
          {
            "key": "sort",
            "value": "sim desc",
            "policy": "append"
          }
        ]
      },
      {
        "id": "starterapp_recommendation_items_for_item_content",
        "queryPipeline": "starterapp_content_recs",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "starterapp_content_recs",
        "additionalProperties": {}
      },
      {
        "id": "starterapp_recommendation_items_for_user_bpr",
        "queryPipeline": "starterapp_items_for_user_bpr_recommendations",
        "searchHandler": "select",
        "collection": "starterapp_bpr_user_recs",
        "additionalProperties": {},
        "params": [
          {
            "key": "filter.user_id",
            "value": "true",
            "policy": "append"
          }
        ]
      },
      {
        "id": "starterapp_recommendation_queries_for_query",
        "queryPipeline": "starterapp_queries_query_recs",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "starterapp_queries_query_recs",
        "additionalProperties": {}
      },
      {
        "id": "starterapp_rules_simulator",
        "queryPipeline": "starterapp",
        "searchHandler": "/select",
        "searchMode": "all",
        "collection": "starterapp",
        "params": [
          {
            "key": "lw.rules.simulate",
            "value": "starterapp_query_rewrite_staging",
            "policy": "default"
          },
          {
            "key": "lw.rules.debug",
            "value": "1",
            "policy": "default"
          },
          {
            "key": "lw.tagger.debug",
            "value": "1",
            "policy": "default"
          },
          {
            "key": "lw.skip_response_signal",
            "value": "1",
            "policy": "default"
          }
        ]
      },
      {
        "id": "starterapp_typeahead",
        "queryPipeline": "starterapp_typeahead",
        "searchHandler": "select",
        "collection": "starterapp",
        "additionalProperties": {},
        "params": [
          {
            "key": "rows",
            "value": "3",
            "policy": "default"
          },
          {
            "key": "echoParams",
            "value": "none",
            "policy": "append"
          }
        ]
      }
    ],
    "parsers": [
      {
        "id": "starterapp",
        "maxParserDepth": 16,
        "parserStages": [
          {
            "type": "archive",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "alwaysDetect": true,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "csv",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "charset": "detect",
            "ignoreBOM": false,
            "autoDetect": true,
            "hasHeaders": true,
            "headers": [],
            "fillValue": "<FILL>",
            "trimWhitespace": true,
            "skipEmptyLines": true,
            "includeRowNumber": true,
            "commentHandling": "ignore",
            "maxRowLength": 10485760,
            "maxNumColumns": 1000,
            "maxColumnChars": 10485760,
            "columnHandling": "default",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "json",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "splitArrays": true,
            "includePath": false,
            "mappings": [],
            "listHandling": "multivalued",
            "expectJsonL": false,
            "maxLineSize": 8192,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "xml",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "rootPaths": [
              "/"
            ],
            "maxSize": 65536,
            "listHandling": "multivalued",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "html",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "charset": "detect",
            "excludeFilters": [],
            "filterBeforeMapping": false,
            "filterBeforeExtractingLinks": false,
            "mappings": [],
            "keepParent": true,
            "extractHtmlLinks": false,
            "extractBodyText": true,
            "metatagsPrefix": "",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "text",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "charset": "detect",
            "ignoreBOM": false,
            "maxLength": 1048576,
            "maxLineLength": 1048576,
            "outputField": "body",
            "splitLines": false,
            "skipEmptyLines": false,
            "skipHeaderLines": 0,
            "trimWhitespace": false,
            "commentHandling": "include",
            "comment": "#",
            "commentField": "comment",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "tika",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "includeImages": false,
            "flattenCompound": true,
            "addFailedDocs": false,
            "addOriginalContent": false,
            "contentEncoding": "binary",
            "returnXml": false,
            "keepOriginalStructure": false,
            "extractHtmlLinks": false,
            "extractOtherLinks": false,
            "excludeContentTypes": [],
            "zipBombCompressionRatio": 200,
            "zipBombMaxDepth": 200,
            "zipBombMaxPackageEntryDepth": 20,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "fallback",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "metadataOnly": false,
            "maxBytesToKeep": 1048576,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          }
        ],
        "detectMediaTypeBasedOnExtension": true,
        "enableMediaTypeDetection": true,
        "maxFieldLength": -1
      }
    ],
    "objectGroups": [
      {
        "id": "53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "name": "items-for-item-recommendations-starterapp",
        "isSystem": true,
        "description": "Objects facilitating items-for-item recommendations for 'starterapp'"
      },
      {
        "id": "53e03b6a-ef7b-11eb-a481-3e22fb50bfba",
        "name": "bpr-items-for-user-recommendations-starterapp",
        "isSystem": true,
        "description": "Objects facilitating bpr-items-for-user recommendations for 'starterapp'"
      },
      {
        "id": "53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "name": "items-for-user-recommendations-starterapp",
        "isSystem": true,
        "description": "Objects facilitating items-for-user recommendations for 'starterapp'"
      },
      {
        "id": "53e03dd6-ef7b-11eb-a481-3e22fb50bfba",
        "name": "bpr-items-for-item-recommendations-starterapp",
        "isSystem": true,
        "description": "Objects facilitating bpr-items-for-item recommendations for 'starterapp'"
      },
      {
        "id": "53e03ee4-ef7b-11eb-a481-3e22fb50bfba",
        "name": "content-recommendations-starterapp",
        "isSystem": true,
        "description": "Objects facilitating content recommendations for 'starterapp'"
      },
      {
        "id": "53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "name": "signals-starterapp",
        "isSystem": true,
        "description": "Collection 'starterapp' objects for signals support"
      },
      {
        "id": "53e0431c-ef7b-11eb-a481-3e22fb50bfba",
        "name": "recommendations-starterapp",
        "isSystem": true,
        "description": "Recommendations for 'starterapp'"
      },
      {
        "id": "53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "name": "queries-for-query-recommendations-starterapp",
        "isSystem": true,
        "description": "Objects facilitating queries-for-query recommendations for 'starterapp'"
      }
    ],
    "links": [
      {
        "subject": "app:starterapp",
        "object": "group:_shared",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-starterapp._system",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "collection:starterapp_job_reports",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "collection:starterapp_query_rewrite",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "collection:starterapp_query_rewrite_staging",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "collection:starterapp_user_prefs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "index-pipeline:starterapp",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "index-pipeline:starterapp-question-answering",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "index-pipeline:starterapp-question-answering-dual-fields",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "index-profile:starterapp",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "query-pipeline:starterapp",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "query-pipeline:starterapp-question-answering",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp",
        "object": "query-pipeline:starterapp-question-answering-dual-fields",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp_job_reports",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp_query_rewrite",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp_query_rewrite_staging",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp_query_rewrite_staging",
        "object": "index-pipeline:starterapp_query_rewrite_staging",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:starterapp_user_prefs",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "datasource:starterapp_web",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "datasource:starterapp_web",
        "object": "collection:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:starterapp_web",
        "object": "index-pipeline:starterapp",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:starterapp_web",
        "object": "parser:starterapp",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "group:53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_items_for_item_recommendations",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "object": "group:d9c88406-ef78-11eb-ad29-3e22fb50bfba",
        "linkType": "isPartOf",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "object": "query-pipeline:starterapp_items_for_item_recommendations",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03962-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_item_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03b6a-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_bpr_user_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03b6a-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03b6a-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03b6a-ef7b-11eb-a481-3e22fb50bfba",
        "object": "group:d9c88406-ef78-11eb-ad29-3e22fb50bfba",
        "linkType": "isPartOf",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03b6a-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_bpr_item_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_items_for_user_recommendations",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "group:d9c88406-ef78-11eb-ad29-3e22fb50bfba",
        "linkType": "isPartOf",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "query-pipeline:starterapp_items_for_user_recommendations",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03cb4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_item_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03dd6-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_bpr_item_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03dd6-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03dd6-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03dd6-ef7b-11eb-a481-3e22fb50bfba",
        "object": "group:d9c88406-ef78-11eb-ad29-3e22fb50bfba",
        "linkType": "isPartOf",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03dd6-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_bpr_item_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03ee4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_content_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03ee4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03ee4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03ee4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "group:d9c88406-ef78-11eb-ad29-3e22fb50bfba",
        "linkType": "isPartOf",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e03ee4-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_content_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_click_signals_aggregation",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_head_tail",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e04092-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_session_rollup",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e0431c-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e0431c-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_recommender_models",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e0431c-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_recs_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e0431c-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_user_item_prefs_agg",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e0431c-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_user_query_history_agg",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_queries_query_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "object": "group:d9c88406-ef78-11eb-ad29-3e22fb50bfba",
        "linkType": "isPartOf",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "object": "query-pipeline:starterapp_queries_query_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:53e044c0-ef7b-11eb-a481-3e22fb50bfba",
        "object": "spark:starterapp_query_recs",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:starterapp",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:starterapp-question-answering",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:starterapp-question-answering-dual-fields",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:starterapp_query_rewrite_staging",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-profile:starterapp",
        "object": "index-pipeline:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "parser:starterapp",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp-question-answering",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp-question-answering-dual-fields",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_content_recs",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_items_for_item_bpr_recommendations",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_items_for_item_recommendations",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_items_for_user_bpr_recommendations",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_items_for_user_recommendations",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_queries_query_recs",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_signals_clicks_by_user",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_signals_documents",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_signals_queries_by_user",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_signals_query_facet",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_typeahead",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:starterapp_user_filter",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp",
        "object": "collection:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp",
        "object": "query-pipeline:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_popular_global_clicks",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_popular_global_clicks",
        "object": "collection:starterapp_signals_aggr",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_popular_global_clicks",
        "object": "query-pipeline:starterapp_signals_documents",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_popular_global_searches",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_popular_global_searches",
        "object": "collection:starterapp_signals",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_popular_global_searches",
        "object": "query-pipeline:starterapp_signals_query_facet",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_popular_user_searches",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_popular_user_searches",
        "object": "collection:starterapp_recs_aggr",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_popular_user_searches",
        "object": "query-pipeline:starterapp_user_filter",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recent_user_clicks",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_recent_user_clicks",
        "object": "collection:starterapp_signals",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recent_user_clicks",
        "object": "query-pipeline:starterapp_signals_clicks_by_user",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recent_user_searches",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_recent_user_searches",
        "object": "collection:starterapp_signals",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recent_user_searches",
        "object": "query-pipeline:starterapp_signals_queries_by_user",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_item_bpr",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_item_bpr",
        "object": "collection:starterapp_bpr_item_recs",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_item_bpr",
        "object": "query-pipeline:starterapp_items_for_item_bpr_recommendations",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_item_content",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_item_content",
        "object": "collection:starterapp_content_recs",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_item_content",
        "object": "query-pipeline:starterapp_content_recs",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_user_bpr",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_user_bpr",
        "object": "collection:starterapp_bpr_user_recs",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_items_for_user_bpr",
        "object": "query-pipeline:starterapp_items_for_user_bpr_recommendations",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_queries_for_query",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_recommendation_queries_for_query",
        "object": "collection:starterapp_queries_query_recs",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_recommendation_queries_for_query",
        "object": "query-pipeline:starterapp_queries_query_recs",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_rules_simulator",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_rules_simulator",
        "object": "collection:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_rules_simulator",
        "object": "query-pipeline:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_typeahead",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:starterapp_typeahead",
        "object": "collection:starterapp",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_typeahead",
        "object": "collection:starterapp_recs_aggr",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:starterapp_typeahead",
        "object": "query-pipeline:starterapp_typeahead",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "spark:starterapp_click_signals_aggregation",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_content_recs",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_phrase_extraction",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_query_recs",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_query_recs",
        "object": "blob:stopwords/stopwords_en.txt",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "spark:starterapp_spell_correction",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_synonym_detection",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_user_item_prefs_agg",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:starterapp_user_query_history_agg",
        "object": "app:starterapp",
        "linkType": "inContextOf",
        "originator": "unspecified"
      }
    ],
    "sparkJobs": [
      {
        "id": "starterapp_bpr_item_recs",
        "numTestUserClicks": 1,
        "trainingDataFilterQuery": "aggr_id_s:starterapp_user_item_prefs_agg",
        "itemMetadataFormat": "solr",
        "performANN": true,
        "itemIdField": "doc_id_s",
        "trainingFormat": "solr",
        "type": "argo-item-recommender-user",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:41.921Z"
          }
        ],
        "useCustomScript": false,
        "filterClicked": true,
        "outputUserRecsCollection": "starterapp_bpr_user_recs",
        "numSimsPerItem": 10,
        "numRecsPerUser": 10,
        "weightField": "weight_d",
        "outputFormat": "solr",
        "minNumClickedProducts": 2,
        "outputBatchSize": "15000",
        "workflowName": "argo-item-recommender-user-workflow",
        "deleteOldRecs": true,
        "maxNumTestUsers": 10000,
        "learningRate": 0.05,
        "factors": 100,
        "randomSeed": 12345,
        "userIdField": "user_id_s",
        "trainingCollection": "starterapp_recs_aggr",
        "minNumItemUniqueClicks": 2,
        "trainingSampleFraction": 1.0,
        "epochs": 30,
        "minNumUserUniqueClicks": 2,
        "outputItemSimCollection": "starterapp_bpr_item_recs"
      },
      {
        "id": "starterapp_click_signals_aggregation",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each query / item combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used to boost documents at query time using the boosting stage.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:42.338Z"
          }
        ],
        "outputCollection": "starterapp_signals_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH sigs_with_filters AS (\n   SELECT c.query as query,\n          c.doc_id,\n          q.filters_s as filters,\n          c.type,\n          c.ref_time,\n          coalesce(c.count_i,1) as count_i,\n          c.timestamp_tdt,\n          coalesce(c.weight_d,0.1) as weight_d\n     FROM ${inputCollection} c\n LEFT JOIN (SELECT id, filters_s FROM ${inputCollection} WHERE type='response') q ON q.id = c.fusion_query_id\n    WHERE c.type IN (${signalTypes}) AND c.timestamp_tdt >= c.catchup_timestamp_tdt\n ), signal_type_groups AS (\n     SELECT SUM(count_i) AS typed_aggr_count_i,\n            query,\n            doc_id,\n            type,\n            filters,\n            time_decay(count_i, timestamp_tdt, \"30 days\", ref_time, weight_d) AS typed_weight_d\n       FROM sigs_with_filters\n   GROUP BY doc_id, query, filters, type\n ) SELECT concat_ws('|', query, doc_id, filters) as id,\n          SUM(typed_aggr_count_i) AS aggr_count_i,\n          query AS query_s,\n          query AS query_t,\n          doc_id AS doc_id_s,\n          filters AS filters_s,\n          SPLIT(filters, ' \\\\$ ') AS filters_ss,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY query, doc_id, filters",
        "useNaturalKey": true,
        "sourceCatchup": true,
        "rollupSql": "SELECT concat_ws('|', query_s, doc_id_s, filters_s) as id,\n  query_s,\n  query_s as query_t,\n  doc_id_s,\n  filters_s,\n  first(aggr_type_s) AS aggr_type_s,\n  SPLIT(filters_s, ' \\\\$ ') AS filters_ss,\n  SUM(weight_d) AS weight_d,\n  SUM(aggr_count_i) AS aggr_count_i\n  FROM starterapp_signals_aggr\n  GROUP BY query_s, doc_id_s, filters_s",
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "click:1.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "starterapp_signals"
      },
      {
        "id": "starterapp_content_recs",
        "vectorizationTfidfMaxDf": 1.0,
        "trainingDataFilterQuery": "*:*",
        "performANN": true,
        "vectorizationDlEnsembleWeight": 1.0,
        "itemIdField": "id",
        "vectorizationTfidfEnsembleWeight": 1.0,
        "trainingFormat": "solr",
        "type": "argo-item-recommender-content",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:42.598Z"
          }
        ],
        "outputCollection": "starterapp_content_recs",
        "vectorizationTfidfFilterStopwords": true,
        "vectorizationFasttextEnsembleWeight": 1.0,
        "useCustomScript": false,
        "vectorizationFasttextEpochs": 15,
        "vectorizationFasttextMinCount": 1,
        "numSimsPerItem": 10,
        "vectorizationFasttextMinNgram": 3,
        "unidecodeText": true,
        "outputFormat": "solr",
        "vectorizationFasttextVectorsSize": 150,
        "topKAnn": 100,
        "vectorizationFasttextSkipGram": true,
        "vectorizationFasttextUseSubwordNgram": true,
        "vectorizationTfidfMaxNgram": 3,
        "lowercaseText": true,
        "workflowName": "argo-item-recommender-content-workflow",
        "deleteOldRecs": true,
        "vectorizationFasttextMaxNgram": 6,
        "contentField": [
          "body_t"
        ],
        "randomSeed": 12345,
        "vectorizationTfidfMinNgram": 1,
        "trainingCollection": "starterapp",
        "trainingSampleFraction": 1.0,
        "batchSize": "15000",
        "vectorizationUseDl": true,
        "vectorizationFasttextWindowSize": 5
      },
      {
        "id": "starterapp_head_tail",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "headQueryCntBoost": 1.0,
        "minCountFilter": 20,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "headTailAnalysis",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:42.827Z"
          }
        ],
        "outputCollection": "starterapp_job_reports",
        "fieldToVectorize": "query",
        "userHead": -1.0,
        "tailRewriteCollection": "starterapp_query_rewrite_staging",
        "signalTypeField": "type",
        "userTail": -1.0,
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"StdTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"standard\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"englishminimalstem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStem\" } ]}",
        "topQ": [
          100.0,
          0.01
        ],
        "mainType": "click",
        "sparkPartitions": 200,
        "overlapThreshold": 4,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "overlapNumBoost": 10.0,
        "trainingCollection": "starterapp_signals",
        "minCountMain": 1,
        "lastTraffic": [
          0.01
        ],
        "trafficCount": [
          5.0
        ],
        "filterType": "response",
        "queryLenThreshold": 2,
        "lenScale": 6,
        "tailRewrite": true,
        "overwriteOutput": true,
        "trafficPerc": [
          0.25,
          0.5,
          0.75
        ]
      },
      {
        "id": "starterapp_item_recs",
        "trainingDataFilterQuery": "aggr_id_s:starterapp_user_item_prefs_agg",
        "modelId": "starterapp_recommender",
        "popularItemMin": 2,
        "itemIdField": "doc_id_s",
        "implicitRatings": true,
        "type": "als_recommender",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:42.956Z"
          }
        ],
        "outputCollection": "starterapp_items_for_user_recommendations",
        "initialLambda": 0.01,
        "sparkConfig": [],
        "alwaysTrain": false,
        "maxTrainingIterations": 10,
        "initialRank": 100,
        "saveModel": false,
        "initialAlpha": 50.0,
        "numSims": 10,
        "itemMetadataFields": [],
        "weightField": "weight_d",
        "initialBlocks": -1,
        "writeOptions": [],
        "itemMetadataJoinField": "doc_id_s",
        "trainingDataFrameConfigOptions": {},
        "gridSearchWidth": 0,
        "dataFormat": "solr",
        "deleteOldRecs": true,
        "randomSeed": 13,
        "numRecs": 10,
        "userIdField": "user_id_s",
        "trainingCollection": "starterapp_recs_aggr",
        "numUserRecsPerItem": 10,
        "modelCollection": "starterapp_recommender_models",
        "trainingSampleFraction": 1.0,
        "outputItemSimCollection": "starterapp_items_for_item_recommendations"
      },
      {
        "id": "starterapp_phrase_extraction",
        "sourceFields": "query",
        "trainingDataSamplingFraction": 1.0,
        "minmatch": 100,
        "trainingDataFilterQuery": "*:*",
        "dataFormat": "solr",
        "enableAutoPublish": false,
        "type": "sip",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.056Z"
          }
        ],
        "outputCollection": "starterapp_query_rewrite_staging",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 8180,
        "fieldToVectorize": "query",
        "dataOutputFormat": "solr",
        "ngramSize": 3,
        "trainingCollection": "starterapp_signals",
        "attachPhrases": false,
        "analyzerConfig": "{ \"analyzers\": [{ \"name\": \"StdTokLowerStop\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"standard\" },\"filters\": [{ \"type\": \"lowercase\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStop\" } ]}",
        "overwriteOutput": true
      },
      {
        "id": "starterapp_query_recs",
        "docIdField": "doc_id",
        "minPairOccCount": 2,
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "minQueryLength": 3,
        "stopwordsBlobName": "stopwords/stopwords_en.txt",
        "dataFormat": "solr",
        "overlapEnabled": true,
        "sessionIdField": "user_id",
        "countField": "count_i",
        "type": "similar_queries",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.233Z"
          }
        ],
        "outputCollection": "starterapp_queries_query_recs",
        "overlapThreshold": 0.3,
        "tokenOverlapValue": 0.0,
        "sparkSQL": "SELECT * from spark_input",
        "fieldToVectorize": "query_t",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "minQueryCount": 2,
        "trainingCollection": "starterapp_signals",
        "specialCharsFilterString": "~!@#$^%&*\\(\\)_+={}\\[\\]|;:\"'<,>.?`/\\\\-",
        "maxQueryLength": 50,
        "overwriteOutput": false
      },
      {
        "id": "starterapp_session_rollup",
        "hiddenParameters": [
          {
            "key": "outputProjectedFieldsOnly",
            "value": "true"
          }
        ],
        "notes": "Aggregate related user activity into a session signal containing activity count, duration, and keywords (based on user search terms). This job is used by the Fusion Insights application to show reports about user sessions. Use the 'elapsedSecsSinceLastActivity' and 'elapsedSecsSinceSessionStart' parameters to determine when a user session is considered to be complete.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.380Z"
          }
        ],
        "outputCollection": "starterapp_signals",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH session_agg AS (\n     SELECT COUNT(1) AS activity_count,\n            MIN(timestamp_tdt) AS start,\n            MAX(timestamp_tdt) AS end,\n            timediff(MAX(timestamp_tdt), MIN(timestamp_tdt), \"MINUTES\") AS duration,\n            'session' AS type,\n            first(user_id) AS user,\n            session_keywords(query) AS keywords,\n            session\n       FROM ${inputCollection}\n      WHERE timestamp_tdt IS NOT NULL\n        AND type != 'session'\n        AND session IS NOT NULL\n        AND session NOT IN (SELECT session FROM ${inputCollection} WHERE type = 'session' AND session IS NOT NULL)\n   GROUP BY session\n     HAVING timediff(current_timestamp(), MAX(timestamp_tdt), \"SECONDS\") >= ${elapsedSecsSinceLastActivity} OR timediff(current_timestamp(), MIN(timestamp_tdt), \"SECONDS\") >= ${elapsedSecsSinceSessionStart})\n SELECT activity_count, start, end, duration, type, user, keywords, session FROM session_agg",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipCheckEnabled": false,
        "parameters": [
          {
            "key": "elapsedSecsSinceLastActivity",
            "value": "360"
          },
          {
            "key": "elapsedSecsSinceSessionStart",
            "value": "3600"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "starterapp_signals"
      },
      {
        "id": "starterapp_spell_correction",
        "corMisRatio": 3.0,
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "correctCntBoost": 2.0,
        "misspellingThreshold": 0.8,
        "minCountFilter": 10,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "tokenPhraseSpellCorrection",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.565Z"
          }
        ],
        "outputCollection": "starterapp_query_rewrite_staging",
        "fieldToVectorize": "query",
        "signalDataIndicator": true,
        "analyzerConfigDictionary": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "editDistBoost": 2.0,
        "minPrefix": 1,
        "soundMatchBoost": 3.0,
        "signalTypeField": "type",
        "dataFormat": "solr",
        "lastCharMatchBoost": 1.0,
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "maxDistance": 2,
        "mainType": "click",
        "sparkPartitions": 200,
        "dictionaryDataFilterQuery": "*:*",
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "correctionThreshold": 0.8,
        "dataOutputFormat": "solr",
        "trainingCollection": "starterapp_signals",
        "minCountMain": 1,
        "minMispellingLen": 5,
        "lenScale": 5,
        "filterType": "response",
        "overwriteOutput": true
      },
      {
        "id": "starterapp_synonym_detection",
        "docIdField": "doc_id_s",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "similarityThreshold": 0.01,
        "countField": "aggr_count_i",
        "enableAutoPublish": false,
        "type": "synonymDetection",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.683Z"
          }
        ],
        "outputCollection": "starterapp_query_rewrite_staging",
        "fieldToVectorize": "query_s",
        "misspellingsFilterQuery": "type:spell",
        "misspellingSQL": "\nSELECT surface_form AS misspelling_s, output AS correction_s\nFROM spell_input\nWHERE doc_type  = 'query_rewrite' AND type = 'spell' AND (review = 'approved' OR review = 'auto')\n\n    ",
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "keyPhraseFilterQuery": "type:phrase",
        "sparkPartitions": 200,
        "overlapThreshold": 0.5,
        "sparkSQL": "SELECT * from spark_input",
        "phraseSQL": "\nSELECT surface_form AS phrases_s, coalesce(confidence, 1) AS likelihood_d, coalesce(word_count,1) AS word_num_i\nFROM phrase_input\nWHERE doc_type  = 'query_rewrite' AND type = 'phrase' AND (review = 'approved' OR review = 'auto')\n\n    ",
        "phraseSQLDataFormat": "solr",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "minQueryCount": 5,
        "misspellingSQLDataFormat": "solr",
        "trainingCollection": "starterapp_signals_aggr",
        "keyPhraseCollection": "starterapp_query_rewrite_staging",
        "misspellingCollection": "starterapp_query_rewrite_staging",
        "overwriteOutput": true
      },
      {
        "id": "starterapp_user_item_prefs_agg",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each user / item combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used as input to the ALS recommendation job.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.857Z"
          }
        ],
        "outputCollection": "starterapp_recs_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH signal_type_groups AS (\n    SELECT SUM(count_i) AS typed_aggr_count_i,\n           doc_id,\n           user_id,\n           type,\n           time_decay(count_i, timestamp_tdt, \"30 days\", ref_time, weight_d) AS typed_weight_d\n      FROM ${inputCollection}\n     WHERE type IN (${signalTypes})\n  GROUP BY user_id, doc_id, type\n ) SELECT SUM(typed_aggr_count_i) AS aggr_count_i,\n          doc_id AS doc_id_s,\n          user_id AS user_id_s,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY doc_id, user_id",
        "useNaturalKey": true,
        "sourceCatchup": true,
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "click:1.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "starterapp_signals"
      },
      {
        "id": "starterapp_user_query_history_agg",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each user / query combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used to boost queries for a user based on their past queries.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "claire",
            "timestamp": "2021-07-28T07:54:43.958Z"
          }
        ],
        "outputCollection": "starterapp_recs_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH signal_type_groups AS (\n    SELECT SUM(count_i) AS typed_aggr_count_i,\n           user_id,\n           query,\n           type,\n           time_decay(count_i, timestamp_tdt, \"30 days\", ref_time, weight_d) AS typed_weight_d\n      FROM ${inputCollection}\n     WHERE type IN (${signalTypes})\n  GROUP BY query, user_id, type\n ) SELECT SUM(typed_aggr_count_i) AS aggr_count_i,\n          user_id AS user_id_s,\n          query AS query_s,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY user_id, query",
        "useNaturalKey": true,
        "sourceCatchup": true,
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "request:1.0,click:5.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "starterapp_signals"
      }
    ],
    "blobs": [
      {
        "id": "prefs-starterapp._system",
        "path": "/prefs-starterapp._system",
        "dir": "/",
        "filename": "prefs-starterapp._system",
        "contentType": "text/plain;charset=UTF-8",
        "size": 89,
        "modifiedTime": "2021-07-28T07:54:34.182Z",
        "version": 1706514316455313408,
        "md5": "7c48eaa27ae04f6e77239ad9cc314a7f",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "stopwords/stopwords_en.txt",
        "path": "/stopwords/stopwords_en.txt",
        "dir": "/stopwords",
        "filename": "stopwords_en.txt",
        "contentType": "text/plain",
        "size": 2490,
        "modifiedTime": "2021-06-30T05:03:32.996Z",
        "version": 1703966841762742272,
        "md5": "5b0141101bacca509e2b696a01e3ef51",
        "metadata": {
          "resourceType": "file"
        }
      }
    ],
    "fusionApps": [
      {
        "id": "starterapp",
        "name": "starterapp",
        "dataUri": "App-Tile-06-460x160.png",
        "properties": {
          "headerImageName": "headerImage6",
          "tileColor": "apps-darkblue",
          "previousCollectionId": "starterapp"
        }
      }
    ],
    "dataSources": [
      {
        "id": "starterapp_web",
        "created": "2020-11-12T02:37:07.998Z",
        "modified": "2020-11-12T02:37:07.998Z",
        "connector": "lucid.web",
        "type": "web",
        "pipeline": "starterapp",
        "parserId": "starterapp",
        "properties": {
          "aliasExpiration": 1,
          "chunkSize": 1,
          "collection": "starterapp",
          "commitAfterItems": 10000,
          "crawlDBType": "on-disk",
          "dedupe": false,
          "dedupeSaveSignature": false,
          "delete": true,
          "delete404": true,
          "deleteErrorsAfter": -1,
          "depth": 4,
          "diagnosticMode": false,
          "emitThreads": 5,
          "f.allowAllCertificates": false,
          "f.allowCircularRedirects": false,
          "f.appendTrailingSlashToLinks": false,
          "f.canonicalTagsRedirectLimit": 4,
          "f.cookieSpec": "browser-compatibility",
          "f.crawlJS": false,
          "f.defaultCharSet": "UTF-8",
          "f.defaultMIMEType": "application/octet-stream",
          "f.discardLinkURLAnchors": true,
          "f.discardLinkURLQueries": false,
          "f.extraLoadTimeMs": 250,
          "f.extraPageLoadDeltaChars": 0,
          "f.filteringRootTags": [
            "body",
            "head"
          ],
          "f.firefoxHeadlessBrowser": true,
          "f.followCanonicalTags": false,
          "f.headlessBrowser": true,
          "f.index_items_discarded": false,
          "f.jsAjaxTimeout": 20000,
          "f.jsEnabledAuth": false,
          "f.jsPageLoadTimeout": 20000,
          "f.jsScriptTimeout": 20000,
          "f.maintainCookies": false,
          "f.maxSizeBytes": -1,
          "f.obeyCharSet": true,
          "f.obeyLinkNofollow": true,
          "f.obeyRobots": true,
          "f.obeyRobotsDelay": true,
          "f.obeyRobotsMeta": true,
          "f.quitTimeoutMs": 5000,
          "f.requestCounterMaxWaitMs": 20000,
          "f.requestCounterMinWaitMs": 5000,
          "f.requestRetryCount": 0,
          "f.respectMetaEquivRedirects": false,
          "f.scrapeLinksBeforeFiltering": false,
          "f.screenshotFullscreen": false,
          "f.simulateMobile": false,
          "f.takeScreenshot": false,
          "f.timeoutMS": 10000,
          "f.useFirefox": false,
          "f.useHighPerfJsEval": false,
          "f.useIpAddressForSslConnections": false,
          "f.useRequestCounter": true,
          "f.userAgentName": "Lucidworks-Anda/2.0",
          "failFastOnStartLinkFailure": true,
          "fetchDelayMS": 0,
          "fetchDelayMSPerHost": true,
          "fetchThreads": 5,
          "forceRefresh": false,
          "forceRefreshClearSignatures": true,
          "initial_mapping": {
            "id": "FromMap",
            "reservedFieldsMappingAllowed": false,
            "retentionMappings": [],
            "skip": false,
            "translationMappings": [
              {
                "operation": "move",
                "source": "charSet",
                "target": "charSet_s"
              },
              {
                "operation": "move",
                "source": "fetchedDate",
                "target": "fetchedDate_dt"
              },
              {
                "operation": "move",
                "source": "lastModified",
                "target": "lastModified_dt"
              },
              {
                "operation": "move",
                "source": "signature",
                "target": "dedupeSignature_s"
              },
              {
                "operation": "move",
                "source": "length",
                "target": "length_l"
              },
              {
                "operation": "move",
                "source": "mimeType",
                "target": "mimeType_s"
              },
              {
                "operation": "move",
                "source": "parent",
                "target": "parent_s"
              },
              {
                "operation": "move",
                "source": "owner",
                "target": "owner_s"
              },
              {
                "operation": "move",
                "source": "group",
                "target": "group_s"
              }
            ],
            "type": "field-mapping",
            "unmappedRule": {
              "delete": false,
              "fieldToCopyValuesTo": "",
              "fieldToMoveValuesTo": "",
              "keep": true,
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "updateMappings": []
          },
          "maxItems": 1000,
          "parserRetryCount": 0,
          "refreshAll": true,
          "refreshErrors": false,
          "refreshOlderThan": -1,
          "refreshStartLinks": false,
          "restrictToTree": true,
          "restrictToTreeAllowSubdomains": false,
          "restrictToTreeIgnoredHostPrefixes": [
            "www."
          ],
          "restrictToTreeUseHostAndPath": false,
          "retainOutlinks": false,
          "retryEmit": true,
          "sitemap_incremental_crawling": false,
          "startLinks": [
            "https://lucidworks.com/"
          ],
          "trackEmbeddedIDs": true
        }
      }
    ]
  },
  "metadata": {
    "formatVersion": "1",
    "exportedBy": "claire",
    "exportedDate": "2021-07-28T07:55:12.238Z",
    "fusionVersion": "5.4.0",
    "fusionGuid": "c8c78e77-5e91-4dae-bced-d853e76e3065"
  }
}